<?xml version="1.0" encoding="utf-8"?>
<aiscript name="order.stredux.outbound" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="aiscripts.xsd">
    <order id="STRedux_Outbound" name="{64563, 1001}" description="{64563, 1002}" category="trade" allowinloop="false">
        <params>
            <param name="stxoutstation" required="true" default="null" type="object" text="{64563, 1050}" comment="Station to trade for">
                <input_param name="class" value="[class.station]" />
            </param>
            <param name="warebasket" default="null" type="internal" text="{1041, 10146}" comment="Wares. List of resources that we will supply, populated from station" />
            <param name="manualwarebasket" required="false" default="null" type="list" text="{64563, 1052}" comment="Optional wares override">
                <input_param name="type" value="'ware'"/>
                <input_param name="cancarry" value="this.ship"/>
              </param>
            <param name="stxoutdock" default="false" type="bool" text="{64563, 1051}" comment="Always dock at home station" />
            <param name="range" default="0" type="internal" text="{1041, 10005}" comment="Always $stxoutstation.sector" />
            <param name="minbuy" default="0" type="internal" text="{1041, 10067}" comment="Unused" />
            <param name="maxbuy" default="0" type="internal" text="{1041, 10067}" comment="Unused" />
            <param name="minsell" default="0" type="number" text="{1041, 10069}" comment="Min gate distance to sell resources.">
                <input_param name="startvalue" value="0" />
                <input_param name="min" value="0" />
                <input_param name="max" value="5" />
                <input_param name="step" value="1" />
            </param>
            <param name="maxsell" default="0" type="number" text="{1041, 10058}" comment="Max gate distance to sell resources. Maximum sell range is limited by $stxoutstation.commander">
                <input_param name="startvalue" value="0" />
                <input_param name="min" value="0" />
                <input_param name="max" value="$stxoutstation.tradenpc.skill.management/3" />
                <input_param name="step" value="1" />
            </param>
            <param name="duration" default="0s" type="internal" infinitevalue="0s" text="{1041, 10034}" comment="Unused" />
            <param name="tradeforbuildstorage" default="null" type="internal" comment="Unused" />
            <param name="usecover" default="false" type="internal" text="Use Cover" comment="Unused" />

            <param name="debugchance" type="bool" default="0" advanced="true" text="{1041, 10086}" comment="Print debug output">
                <input_param name="truevalue" value="100" />
            </param>
        </params>
        <requires>
            <match shiptype="shiptype.lasertower" negate="true" />
            <match class="class.spacesuit" negate="true" />
        </requires>
    </order>
    <interrupts>
        <handler ref="SectorChangeHandler" />
        <handler ref="AttackHandler" />
        <handler ref="MissileLockHandler" />
        <handler ref="ScannedHandler" />
        <handler ref="InspectedHandler" />
        <handler ref="FoundAbandonedHandler" />
        <handler ref="FoundLockboxHandler" />
        <handler ref="ResupplyHandler" />
        <handler ref="TargetInvalidHandler" />
        <handler ref="TideHandler" />
    </interrupts>
    <init>
        <set_value name="$time_start" exact="player.age" />

        <do_if value="this.assignedcontrolled.hasownaccount and not this.assignedcontrolled.tradeorders.count">
            <!-- NB: at the moment, ships only have temporary accounts set up when they have trade orders. These temp accounts are cleared when the trades are cleaned up. -->
            <remove_object_account object="this.assignedcontrolled" transfer="true" />
        </do_if>

        <set_value name="$range" exact="$stxoutstation.sector" />

        <set_command_action commandaction="commandaction.searchingtrades" />
    </init>
    <attention min="unknown">
        <actions>
            <!-- this.ship.commander.tradenpc.skill.management -->
            <debug_text text="'NPC tradeskill: %s %s'.[$stxoutstation.tradenpc.knownname,$stxoutstation.tradenpc.skill.management]" chance="$debugchance" />
            <do_if value="(not $stxoutstation.exists) or $stxoutstation.iswreck">
                <debug_text text="'Homebase does not exist'" chance="$debugchance" />
                <!-- TODO: Needs to fail order and wait -->
                <set_value name="$failurereason" exact="{64563, 2002}" comment="Station no longer exists" />
                <resume label="finish" />
            </do_if>

            <!-- update the wares we deal with for a new trade run - ensure that we don't miss any wares if the list has changed due to the stxoutstation being expanded -->
            <do_if value="$stxoutstation.exists and not $stxoutstation.iswreck">
                <set_value name="$resources" exact="$stxoutstation.resources.list" />
                <set_value name="$products" exact="$stxoutstation.products.list" />
                <set_value name="$tradewares" exact="$stxoutstation.tradewares.list" />

                <!-- at this point, $products contains all of the wares that our commander wants to dispose of. clean up all of the entries in this.$sellpricetable that are not products. -->
                <do_if value="this.$sellpricetable?">
                    <do_for_each name="$locware" in="this.$sellpricetable" reverse="true">
                        <do_if value="not $products.indexof.{$locware} and not $tradewares.indexof.{$locware}">
                            <debug_text text="'cleaning up %s from sellpricetable.'.[$locware]" chance="$debugchance" />
                            <remove_value name="this.$sellpricetable.{$locware}" />
                        </do_if>
                    </do_for_each>
                </do_if>

                <!-- start with an empty list in case $warebasket has wares that $stxoutstation no longer needs. -->
                <create_list name="$locwares" />

                <do_for_each name="$ware" in="$resources">
                    <do_if value="not $locwares.indexof.{$ware}">
                        <do_if value="(this.ship.cargo.{$ware}.max gt 0) and not $ware.isprocessed">
                            <append_to_list name="$locwares" exact="$ware" />
                            <debug_text text="'adding resource: %s'.[$ware]" chance="$debugchance"/>
                        </do_if>
                    </do_if>
                </do_for_each>
                <do_for_each name="$ware" in="$products">
                    <do_if value="not $locwares.indexof.{$ware}">
                        <do_if value="(this.ship.cargo.{$ware}.max gt 0) and not $ware.isprocessed">
                            <append_to_list name="$locwares" exact="$ware" />
                            <debug_text text="'adding product: %s'.[$ware]" chance="$debugchance"/>
                        </do_if>
                    </do_if>
                </do_for_each>
                <do_for_each name="$ware" in="$tradewares">
                    <do_if value="not $locwares.indexof.{$ware}">
                        <do_if value="(this.ship.cargo.{$ware}.max gt 0) and not $ware.isprocessed">
                            <append_to_list name="$locwares" exact="$ware" />
                            <debug_text text="'adding tradeware: %s'.[$ware]" chance="$debugchance"/>
                        </do_if>
                    </do_if>
                </do_for_each>

                <remove_value name="$ware" />
                <remove_value name="$tradewares" />
                <remove_value name="$products" />
                <remove_value name="$resources" />

                <!-- check to see if we either added something or removed something from our warebasket. -->
                <do_if value="not @$warebasket">
                    <set_value name="$basketchanged" />
                </do_if>
                <do_else>
                    <do_for_each name="$locware" in="$locwares">
                        <do_if value="not $warebasket.indexof.{$locware}">
                            <set_value name="$basketchanged" />
                            <break />
                        </do_if>
                    </do_for_each>
                </do_else>
                <do_if value="not $basketchanged?">
                    <do_for_each name="$locware" in="$warebasket">
                        <do_if value="not $locwares.indexof.{$locware}">
                            <set_value name="$basketchanged" />
                            <break />
                        </do_if>
                    </do_for_each>
                </do_if>

                <do_if value="$basketchanged?">
                    <debug_text text="'%s %s %s updating warebasket. \nold warebasket: %s\nnew warebasket: %s'.[@this.ship.idcode, @this.ship.knownname, this.ship, $warebasket, $locwares]" chance="$debugchance" />
                    <set_value name="$warebasket" exact="$locwares.clone" />
                    <do_if value="@this.ship.order.id == 'STRedux_Outbound'">
                        <edit_order_param order="this.ship.order" param="'warebasket'" value="$locwares" />
                        <wait exact="1ms" />
                    </do_if>
                </do_if>

                <remove_value name="$basketchanged" />
                <remove_value name="$locwares" />
                <remove_value name="$locware" />
            </do_if>

            <run_script name="'order.stredux.traderoutine'">
                <param name="warebasket" value="$warebasket.clone" />
                <param name="range" value="$range" />
                <param name="stxoutstation" value="$stxoutstation" />
                <param name="stxoutdock" value="$stxoutdock" />
                <param name="minsell" value="$minsell" />
                <param name="maxsell" value="$maxsell" />
                <param name="debugchance" value="$debugchance" />
                <param name="debugchance2" value="$debugchance" />
            </run_script>
        </actions>
    </attention>
</aiscript>
